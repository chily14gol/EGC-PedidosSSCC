@model List<string>

@{
    var fechasDisponibles = ViewBag.Fechas as List<string> ?? new List<string>();
    string fechaSeleccionada = ViewBag.FechaSeleccionada as string;
    string errorLectura = ViewBag.ErrorLecturaLogs as string;
    bool sinLogs = ViewBag.SinLogs is bool flag && flag;
    bool hayErrores = Model != null && Model.Count > 0;
}

<div class="container text-center mt-5">
    <h2>
        <i class="bi bi-emoji-frown text-danger"></i> Registro de Errores
    </h2>
    <p class="text-muted">Parece que algunos bugs han decidido hacer de las suyas</p>

    @if (!string.IsNullOrEmpty(errorLectura))
    {
        <div class="alert alert-danger" role="alert">
            @errorLectura
        </div>
    }
    else if (sinLogs)
    {
        <div class="alert alert-info" role="alert">
            No hay errores registrados.
        </div>
    }
    else if (!hayErrores)
    {
        <div class="alert alert-warning" role="alert">
            No se pudieron cargar los registros de error.
        </div>
    }
    else
    {
        <div class="container mt-4">
            <form method="get" class="form-inline mb-3">
                <label for="fecha" class="me-2">Filtrar por fecha:</label>
                <select name="fecha" id="fecha" class="form-select w-auto d-inline-block me-2" onchange="this.form.submit()">
                    <option value="">Todas</option>
                    @foreach (var fecha in fechasDisponibles)
                    {
                        var fechaFormateada = DateTime.Parse(fecha).ToString("dd/MM/yyyy");

                        <option value="@fecha" @(fecha == fechaSeleccionada ? "selected" : "")>
                            @fechaFormateada
                        </option>
                    }
                </select>
            </form>
        </div>

        <div class="row justify-content-center">
            <table class="table table-bordered">
                <thead class="table-danger">
                    <tr>
                        <th><i class="bi"></i>Tipo</th>
                        <th><i class="bi bi-calendar-event"></i> Fecha</th>
                        <th><i class="bi bi-bug"></i> Mensaje de Error</th>
                        <th><i class="bi bi-globe"></i> URL</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var error in Model)
                    {
                        var lineas = error.Split('\n');
                        var encabezado = lineas[0].Split('|');

                        if (encabezado.Length < 2)
                        {
                            continue;
                        }

                        string tipo = encabezado[0].Trim().ToUpper();
                        DateTime fecha = DateTime.Parse(encabezado[1].Trim());
                        string url = encabezado.Length >= 4 ? encabezado[2].Trim() : "-";
                        string mensajeCabecera = encabezado.Length > 3 ? encabezado[3].Trim() : "";

                        if (encabezado.Length == 3)
                        {
                            url = "";
                            mensajeCabecera = encabezado[2].Trim();
                        }
                        else
                        {
                            url = encabezado[2].Trim();
                            mensajeCabecera = encabezado[3].Trim();
                        }

                        // Stack trace o líneas adicionales
                        string mensajeExtendido = string.Join(" ", lineas.Skip(1).Select(l => l.Trim()));

                        // Mensaje completo combinado
                        string mensaje = (mensajeCabecera + " " + mensajeExtendido).Trim();
                        mensaje = System.Net.WebUtility.HtmlDecode(mensaje);

                        string icono = tipo switch
                        {
                            "ERROR" => "bi-bug-fill text-danger",
                            "WARN" => "bi-exclamation-circle-fill text-warning",
                            "INFO" => "bi-info-circle-fill text-primary",
                            "DEBUG" => "bi-gear-fill text-muted",
                            _ => "bi-question-circle text-secondary"
                        };

                        <tr>
                            <td><i class="bi @icono"></i> @tipo</td>
                            <td>@fecha.ToString("dd/MM/yyyy HH:mm:ss")</td>
                            <td>
                                <span class="mensaje-truncado" title="@mensaje">@mensaje</span>
                            </td>
                            <td>@url</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<style>
    .mensaje-truncado {
        max-width: 500px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: inline-block;
        vertical-align: top;
    }
</style>
<script>
    $(document).ready(function () {
        $(".breadcrumb-container").hide();
        $('#contenidoPagina').fadeIn(); // Mostrar contenido tras verificación
        ocultarDivCargando();
    });
</script>
